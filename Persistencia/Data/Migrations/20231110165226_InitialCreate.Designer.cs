// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia.Data;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(projectContext))]
    [Migration("20231110165226_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdStateFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdStateFk" }, "IX_City_IdstateFk");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateRegister")
                        .HasColumnType("date")
                        .HasColumnName("date_register");

                    b.Property<int>("IdCityFk")
                        .HasColumnType("int");

                    b.Property<string>("IdCostume")
                        .HasColumnType("longtext");

                    b.Property<int>("IdTipoPersonaFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "IX_Customer_IdCustomer")
                        .IsUnique();

                    b.HasIndex(new[] { "IdTipoPersonaFk" }, "IX_customer_IdPersonTypeFk");

                    b.HasIndex(new[] { "IdCityFk" }, "IX_customer_IdcityFk");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entities.Persontype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("persontype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdcountryFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdcountryFk" }, "IX_state_IdcountryFk");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.State", "IdStateFkNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdStateFk")
                        .IsRequired()
                        .HasConstraintName("FK_City_State_IdstateFk");

                    b.Navigation("IdStateFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.City", "IdcityFkNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("IdCityFk")
                        .IsRequired()
                        .HasConstraintName("FK_customer_city_IdcityFk");

                    b.HasOne("Domain.Entities.Persontype", "IdTipoPersonaFkNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("IdTipoPersonaFk")
                        .IsRequired()
                        .HasConstraintName("FK_customer_PersonType_IdPersonTypeFk");

                    b.Navigation("IdTipoPersonaFkNavigation");

                    b.Navigation("IdcityFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.HasOne("Domain.Entities.Country", "IdcountryFkNavigation")
                        .WithMany("States")
                        .HasForeignKey("IdcountryFk")
                        .IsRequired();

                    b.Navigation("IdcountryFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Domain.Entities.Persontype", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
